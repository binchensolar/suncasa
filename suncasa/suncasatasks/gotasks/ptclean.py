##################### generated by xml-casa (v2) from ptclean.xml ###################
##################### 0ee078d6e13f9642f02709c6b10aa1d1 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from suncasatasks import ptclean as _ptclean_t
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _ptclean:
    """
    ptclean ---- Parallelized clean in consecutive time steps

    Parallelized clean in consecutive time steps. Packed over CASA clean.

    --------- parameter descriptions ---------------------------------------------

    vis            Name of input visibility file
    imageprefix    Prefix of output image names (usually useful in defining the output path)
    imagesuffix    Suffix of output image names (usually useful in specifyting the image type, version, etc.)
    ncpu           Number of cpu cores to use
    twidth         Number of time pixels to average
    doreg          True if use vla_prep to register the image
    usephacenter   True if use the phacenter information from the measurement set (e.g., VLA); False to assume the phase center is at the solar disk center (EOVSA)
    reftime        Reference time of the J2000 coordinates associated with the ephemeris target. e.g., "2012/03/03/12:00". This is used for helioimage2fits.py to find the solar x y offset in order to register the image. If not set, use the actual timerange of the image (default)
    toTb           True if convert to brightness temperature
    overwrite      True if overwrite the image
    outlierfile    Text file with image names, sizes, centers for outliers
    field          Field Name or id
    spw            Spectral windows e.g. \'0~3\', \'\' is all
    selectdata     Other data selection parameters
    timerange      Range of time to select from data
    uvrange        Select data within uvrange
    antenna        Select data based on antenna/baseline
    scan           Scan number range
    observation    Observation ID range
    intent         Scan Intent(s)
    mode           Spectral gridding type (mfs, channel, velocity, frequency)
    resmooth       Re-restore the cube image to a common beam when True
    gridmode       Gridding kernel for FFT-based transforms, default=\'\' None
    wprojplanes    Number of w-projection planes for convolution; -1 => automatic determination
    facets         Number of facets along each axis (main image only)
    cfcache        Convolution function cache directory
    rotpainc       Parallactic angle increment (degrees) for OTF A-term rotation
    painc          Parallactic angle increment (degrees) for computing A-term
    aterm          Switch-on the A-Term?
    psterm         Switch-on the PS-Term?
    mterm          Switch-on the M-Term?
    wbawp          Trigger the wide-band A-Projection algorithm?
    conjbeams      Use frequency conjugate beams in WB A-Projection algorithm?
    epjtable       Table of EP-Jones parameters
    interpolation  Spectral interpolation (nearest, linear, cubic).
    niter          Maximum number of iterations
    gain           Loop gain for cleaning
    threshold      Flux level to stop cleaning, must include units: \'1.0mJy\'
    psfmode        Method of PSF calculation to use during minor cycles
    imagermode     Options: \'csclean\' or \'mosaic\', \'\', uses psfmode
    ftmachine      Gridding method for the image
    mosweight      Individually weight the fields of the mosaic
    scaletype      Controls scaling of pixels in the image plane. default=\'SAULT\'; example: scaletype=\'PBCOR\' Options: \'PBCOR\',\'SAULT\'
    multiscale     Deconvolution scales (pixels); [] = standard clean
    negcomponent   Stop cleaning if the largest scale finds this number of neg components
    smallscalebias a bias to give more weight toward smaller scales
    interactive    Use interactive clean (with GUI viewer)
    mask           Cleanbox(es), mask image(s), region(s), or a level
    nchan          Number of channels (planes) in output image; -1 = all
    start          start of output spectral dimension
    width          width of output spectral channels
    outframe       default spectral frame of output image
    veltype        velocity definition (radio, optical, true)
    imsize         x and y image size in pixels.  Single value: same for both
    cell           x and y cell size(s). Default unit arcsec.
    phasecenter    Image center: direction or field index
    restfreq       Rest frequency to assign to image (see help)
    stokes         Stokes params to image (eg I,IV,IQ,IQUV)
    weighting      Weighting of uv (natural, uniform, briggs, ...)
    robust         Briggs robustness parameter
    uvtaper        Apply additional uv tapering of visibilities
    outertaper     uv-taper on outer baselines in uv-plane
    innertaper     uv-taper in center of uv-plane (not implemented)
    modelimage     Name of model image(s) to initialize cleaning
    restoringbeam  Output Gaussian restoring beam for CLEAN image
    pbcor          Output primary beam-corrected image
    minpb          Minimum PB level to use
    usescratch     True if to save model visibilities in MODEL_DATA column
    noise          noise parameter for briggs abs mode weighting
    npixels        number of pixels for superuniform or briggs weighting
    npercycle      Clean iterations before interactive prompt (can be changed)
    cyclefactor    Controls how often major cycles are done. (e.g. 5 for frequently)
    cyclespeedup   Cycle threshold doubles in this number of iterations
    nterms         Number of Taylor coefficients to model the sky frequency dependence
    reffreq        Reference frequency (nterms > 1),\'\' uses central data-frequency
    chaniter       Clean each channel to completion (True), or all channels each cycle (False)
    flatnoise      Controls whether searching for clean components is done in a constant noise residual image (True) or in an optimal signal-to-noise residual image (False)
    allowchunk     Divide large image cubes into channel chunks for deconvolution
    [1;42mRETURNS[1;m           void

    --------- examples -----------------------------------------------------------

    
    


    """

    _info_group_ = """imaging"""
    _info_desc_ = """Parallelized clean in consecutive time steps"""

    __schema = {'vis': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'imageprefix': {'type': 'cStr', 'coerce': _coerce.to_str}, 'imagesuffix': {'type': 'cStr', 'coerce': _coerce.to_str}, 'ncpu': {'type': 'cInt'}, 'twidth': {'type': 'cInt'}, 'doreg': {'type': 'cBool'}, 'usephacenter': {'type': 'cBool'}, 'reftime': {'type': 'cStr', 'coerce': _coerce.to_str}, 'toTb': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'outlierfile': {'type': 'cStr', 'coerce': _coerce.to_str}, 'field': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'spw': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'selectdata': {'type': 'cBool'}, 'timerange': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'uvrange': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'antenna': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'scan': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'observation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}, 'intent': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'mode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'mfs', 'channel', 'velocity', 'frequency' ]}, 'resmooth': {'type': 'cBool'}, 'gridmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'widefield', 'aprojection', 'advancedaprojection' ]}, 'wprojplanes': {'type': 'cInt'}, 'facets': {'type': 'cInt'}, 'cfcache': {'type': 'cStr', 'coerce': _coerce.to_str}, 'rotpainc': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'painc': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'aterm': {'type': 'cBool'}, 'psterm': {'type': 'cBool'}, 'mterm': {'type': 'cBool'}, 'wbawp': {'type': 'cBool'}, 'conjbeams': {'type': 'cBool'}, 'epjtable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'interpolation': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'nearest', 'linear', 'cubic', 'spline' ]}, 'niter': {'type': 'cInt'}, 'gain': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'threshold': {'type': 'cDoubleQuant'}, 'psfmode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'clark', 'clarkstokes', 'hogbom' ]}, 'imagermode': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ '', 'csclean', 'mosaic' ]}, 'ftmachine': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'sd', 'awproject', 'ft', 'both', 'mosaic' ]}, 'mosweight': {'type': 'cBool'}, 'scaletype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'SAULT', 'PBCOR' ]}, 'multiscale': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'negcomponent': {'type': 'cInt'}, 'smallscalebias': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'interactive': {'type': 'cBool'}, 'mask': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'nchan': {'type': 'cInt'}, 'start': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'width': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outframe': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'geo', 'bary', 'lsrk', 'topo', 'lsrd', 'cmb', 'galacto', 'lgroup', '' ]}, 'veltype': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'radio', 'optical', 'true', 'relativistic' ]}, 'imsize': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'cell': {'type': 'cDoubleQuant'}, 'phasecenter': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'restfreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'stokes': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'I', 'IQUV', 'UV', 'RRLL', 'IQ', 'V', 'IUV', 'QU', 'YY', 'RR', 'Q', 'U', 'IV', 'XX', 'XXYY', 'IQU', 'LL' ]}, 'weighting': {'type': 'cStr', 'coerce': _coerce.to_str, 'allowed': [ 'briggsabs', 'briggs', 'natural', 'radial', 'superuniform', 'uniform' ]}, 'robust': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': -2.0, 'max': 2.0}, 'uvtaper': {'type': 'cBool'}, 'outertaper': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'innertaper': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'modelimage': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'restoringbeam': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'pbcor': {'type': 'cBool'}, 'minpb': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'usescratch': {'type': 'cBool'}, 'noise': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'npixels': {'type': 'cInt'}, 'npercycle': {'type': 'cInt'}, 'cyclefactor': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'cyclespeedup': {'type': 'cInt'}, 'nterms': {'type': 'cInt'}, 'reffreq': {'type': 'cStr', 'coerce': _coerce.to_str}, 'chaniter': {'type': 'cBool'}, 'flatnoise': {'type': 'cBool'}, 'allowchunk': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 17 + 4
        output = [ ]
        addon = ''
        first_addon = True
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __phasecenter_dflt( self, glb ):
        return ''

    def __phasecenter( self, glb ):
        if 'phasecenter' in glb: return glb['phasecenter']
        return ''

    def __minpb_dflt( self, glb ):
        return float(0.2)

    def __minpb( self, glb ):
        if 'minpb' in glb: return glb['minpb']
        return float(0.2)

    def __gain_dflt( self, glb ):
        return float(0.1)

    def __gain( self, glb ):
        if 'gain' in glb: return glb['gain']
        return float(0.1)

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __mask_dflt( self, glb ):
        return [  ]

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return [  ]

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __imagesuffix_dflt( self, glb ):
        return ''

    def __imagesuffix( self, glb ):
        if 'imagesuffix' in glb: return glb['imagesuffix']
        return ''

    def __psfmode_dflt( self, glb ):
        return 'clark'

    def __psfmode( self, glb ):
        if 'psfmode' in glb: return glb['psfmode']
        return 'clark'

    def __imsize_dflt( self, glb ):
        return [ int(256),int(256) ]

    def __imsize( self, glb ):
        if 'imsize' in glb: return glb['imsize']
        return [ int(256),int(256) ]

    def __twidth_dflt( self, glb ):
        return int(1)

    def __twidth( self, glb ):
        if 'twidth' in glb: return glb['twidth']
        return int(1)

    def __mode_dflt( self, glb ):
        return 'mfs'

    def __mode( self, glb ):
        if 'mode' in glb: return glb['mode']
        return 'mfs'

    def __interactive_dflt( self, glb ):
        return False

    def __interactive( self, glb ):
        if 'interactive' in glb: return glb['interactive']
        return False

    def __threshold_dflt( self, glb ):
        return {'value': float(0.0), 'unit': 'mJy'}

    def __threshold( self, glb ):
        if 'threshold' in glb: return glb['threshold']
        return {'value': float(0.0), 'unit': 'mJy'}

    def __restfreq_dflt( self, glb ):
        return ''

    def __restfreq( self, glb ):
        if 'restfreq' in glb: return glb['restfreq']
        return ''

    def __selectdata_dflt( self, glb ):
        return True

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return True

    def __imageprefix_dflt( self, glb ):
        return ''

    def __imageprefix( self, glb ):
        if 'imageprefix' in glb: return glb['imageprefix']
        return ''

    def __usescratch_dflt( self, glb ):
        return False

    def __usescratch( self, glb ):
        if 'usescratch' in glb: return glb['usescratch']
        return False

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __cell_dflt( self, glb ):
        return {'value': float(1.0), 'unit': 'arcsec'}

    def __cell( self, glb ):
        if 'cell' in glb: return glb['cell']
        return {'value': float(1.0), 'unit': 'arcsec'}

    def __allowchunk_dflt( self, glb ):
        return False

    def __allowchunk( self, glb ):
        if 'allowchunk' in glb: return glb['allowchunk']
        return False

    def __outlierfile_dflt( self, glb ):
        return ''

    def __outlierfile( self, glb ):
        if 'outlierfile' in glb: return glb['outlierfile']
        return ''

    def __niter_dflt( self, glb ):
        return int(500)

    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        return int(500)

    def __pbcor_dflt( self, glb ):
        return False

    def __pbcor( self, glb ):
        if 'pbcor' in glb: return glb['pbcor']
        return False

    def __ncpu_dflt( self, glb ):
        return int(8)

    def __ncpu( self, glb ):
        if 'ncpu' in glb: return glb['ncpu']
        return int(8)

    def __imagermode_dflt( self, glb ):
        return 'csclean'

    def __imagermode( self, glb ):
        if 'imagermode' in glb: return glb['imagermode']
        return 'csclean'

    def __uvtaper_dflt( self, glb ):
        return False

    def __uvtaper( self, glb ):
        if 'uvtaper' in glb: return glb['uvtaper']
        return False

    def __stokes_dflt( self, glb ):
        return 'I'

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return 'I'

    def __multiscale_dflt( self, glb ):
        return [ int(0) ]

    def __multiscale( self, glb ):
        if 'multiscale' in glb: return glb['multiscale']
        return [ int(0) ]

    def __restoringbeam_dflt( self, glb ):
        return [  ]

    def __restoringbeam( self, glb ):
        if 'restoringbeam' in glb: return glb['restoringbeam']
        return [  ]

    def __gridmode_dflt( self, glb ):
        return ''

    def __gridmode( self, glb ):
        if 'gridmode' in glb: return glb['gridmode']
        return ''

    def __weighting_dflt( self, glb ):
        return 'natural'

    def __weighting( self, glb ):
        if 'weighting' in glb: return glb['weighting']
        return 'natural'

    def __modelimage_dflt( self, glb ):
        return ''

    def __modelimage( self, glb ):
        if 'modelimage' in glb: return glb['modelimage']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False

    def __doreg_dflt( self, glb ):
        return False

    def __doreg( self, glb ):
        if 'doreg' in glb: return glb['doreg']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __painc_dflt( self, glb ):
        if self.__gridmode( glb ) == "aprojection": return float(360.0)
        if self.__gridmode( glb ) == "advancedaprojection": return float(360.0)
        return None
    def __rotpainc_dflt( self, glb ):
        if self.__gridmode( glb ) == "aprojection": return float(5.0)
        if self.__gridmode( glb ) == "advancedaprojection": return float(5.0)
        return None
    def __smallscalebias_dflt( self, glb ):
        if self.__multiscale( glb ) != [ int([]) ]: return float(0.6)
        return None
    def __intent_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __noise_dflt( self, glb ):
        if self.__weighting( glb ) == "briggsabs": return "1.0Jy"
        return None
    def __innertaper_dflt( self, glb ):
        if self.__uvtaper( glb ) == bool(True): return []
        return None
    def __interpolation_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return "linear"
        if self.__mode( glb ) == "velocity": return "linear"
        if self.__mode( glb ) == "frequency": return "linear"
        return None
    def __cyclespeedup_dflt( self, glb ):
        if self.__imagermode( glb ) == "csclean": return int(-1)
        if self.__imagermode( glb ) == "mosaic": return int(-1)
        return None
    def __nterms_dflt( self, glb ):
        if self.__mode( glb ) == "mfs": return int(1)
        return None
    def __nchan_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return int(-1)
        if self.__mode( glb ) == "velocity": return int(-1)
        if self.__mode( glb ) == "frequency": return int(-1)
        return None
    def __reffreq_dflt( self, glb ):
        if self.__mode( glb ) == "mfs": return ""
        return None
    def __conjbeams_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return bool(True)
        return None
    def __reftime_dflt( self, glb ):
        if self.__doreg( glb ) == bool(True): return ""
        return None
    def __chaniter_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return bool(False)
        if self.__mode( glb ) == "velocity": return bool(False)
        if self.__mode( glb ) == "frequency": return bool(False)
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __flatnoise_dflt( self, glb ):
        if self.__imagermode( glb ) == "mosaic": return bool(True)
        return None
    def __wbawp_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return bool(False)
        return None
    def __npixels_dflt( self, glb ):
        if self.__weighting( glb ) == "briggs": return int(0)
        if self.__weighting( glb ) == "briggsabs": return int(0)
        if self.__weighting( glb ) == "superuniform": return int(0)
        return None
    def __mosweight_dflt( self, glb ):
        if self.__imagermode( glb ) == "mosaic": return bool(False)
        return None
    def __cyclefactor_dflt( self, glb ):
        if self.__imagermode( glb ) == "csclean": return float(1.5)
        if self.__imagermode( glb ) == "mosaic": return float(1.5)
        return None
    def __toTb_dflt( self, glb ):
        if self.__doreg( glb ) == bool(True): return bool(False)
        return None
    def __scaletype_dflt( self, glb ):
        if self.__imagermode( glb ) == "mosaic": return "SAULT"
        return None
    def __outertaper_dflt( self, glb ):
        if self.__uvtaper( glb ) == bool(True): return []
        return None
    def __robust_dflt( self, glb ):
        if self.__weighting( glb ) == "briggs": return float(0.0)
        if self.__weighting( glb ) == "briggsabs": return float(0.0)
        return None
    def __resmooth_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return bool(False)
        if self.__mode( glb ) == "velocity": return bool(False)
        if self.__mode( glb ) == "frequency": return bool(False)
        return None
    def __aterm_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return bool(True)
        return None
    def __usephacenter_dflt( self, glb ):
        if self.__doreg( glb ) == bool(True): return bool(True)
        return None
    def __mterm_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return bool(True)
        return None
    def __veltype_dflt( self, glb ):
        if self.__mode( glb ) == "velocity": return "radio"
        return None
    def __npercycle_dflt( self, glb ):
        if self.__interactive( glb ) == bool(True): return int(100)
        return None
    def __outframe_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return ""
        if self.__mode( glb ) == "velocity": return ""
        if self.__mode( glb ) == "frequency": return ""
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __negcomponent_dflt( self, glb ):
        if self.__multiscale( glb ) != [ int([]) ]: return int(-1)
        return None
    def __psterm_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return bool(True)
        return None
    def __start_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return ""
        if self.__mode( glb ) == "velocity": return ""
        if self.__mode( glb ) == "frequency": return ""
        return None
    def __observation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __facets_dflt( self, glb ):
        if self.__gridmode( glb ) == "widefield": return int(1)
        return None
    def __width_dflt( self, glb ):
        if self.__mode( glb ) == "channel": return 1
        if self.__mode( glb ) == "velocity": return ""
        if self.__mode( glb ) == "frequency": return ""
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __epjtable_dflt( self, glb ):
        if self.__gridmode( glb ) == "advancedaprojection": return ""
        return None
    def __cfcache_dflt( self, glb ):
        if self.__gridmode( glb ) == "aprojection": return "cfcache.dir"
        if self.__gridmode( glb ) == "advancedaprojection": return "cfcache.dir"
        return None
    def __wprojplanes_dflt( self, glb ):
        if self.__gridmode( glb ) == "widefield": return int(-1)
        if self.__gridmode( glb ) == "aprojection": return int(1)
        if self.__gridmode( glb ) == "advancedaprojection": return int(1)
        return None
    def __ftmachine_dflt( self, glb ):
        if self.__imagermode( glb ) == "mosaic": return "mosaic"
        return None

    #--------- return subparam values -------------------------------------------------
    def __usephacenter( self, glb ):
        if 'usephacenter' in glb: return glb['usephacenter']
        dflt = self.__usephacenter_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __reftime( self, glb ):
        if 'reftime' in glb: return glb['reftime']
        dflt = self.__reftime_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __toTb( self, glb ):
        if 'toTb' in glb: return glb['toTb']
        dflt = self.__toTb_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        dflt = self.__observation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        dflt = self.__intent_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __resmooth( self, glb ):
        if 'resmooth' in glb: return glb['resmooth']
        dflt = self.__resmooth_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __wprojplanes( self, glb ):
        if 'wprojplanes' in glb: return glb['wprojplanes']
        dflt = self.__wprojplanes_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __facets( self, glb ):
        if 'facets' in glb: return glb['facets']
        dflt = self.__facets_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __cfcache( self, glb ):
        if 'cfcache' in glb: return glb['cfcache']
        dflt = self.__cfcache_dflt( glb )
        if dflt is not None: return dflt
        return 'cfcache.dir'
    def __rotpainc( self, glb ):
        if 'rotpainc' in glb: return glb['rotpainc']
        dflt = self.__rotpainc_dflt( glb )
        if dflt is not None: return dflt
        return float(5.0)
    def __painc( self, glb ):
        if 'painc' in glb: return glb['painc']
        dflt = self.__painc_dflt( glb )
        if dflt is not None: return dflt
        return float(360.0)
    def __aterm( self, glb ):
        if 'aterm' in glb: return glb['aterm']
        dflt = self.__aterm_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __psterm( self, glb ):
        if 'psterm' in glb: return glb['psterm']
        dflt = self.__psterm_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __mterm( self, glb ):
        if 'mterm' in glb: return glb['mterm']
        dflt = self.__mterm_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __wbawp( self, glb ):
        if 'wbawp' in glb: return glb['wbawp']
        dflt = self.__wbawp_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __conjbeams( self, glb ):
        if 'conjbeams' in glb: return glb['conjbeams']
        dflt = self.__conjbeams_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __epjtable( self, glb ):
        if 'epjtable' in glb: return glb['epjtable']
        dflt = self.__epjtable_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __interpolation( self, glb ):
        if 'interpolation' in glb: return glb['interpolation']
        dflt = self.__interpolation_dflt( glb )
        if dflt is not None: return dflt
        return 'linear'
    def __ftmachine( self, glb ):
        if 'ftmachine' in glb: return glb['ftmachine']
        dflt = self.__ftmachine_dflt( glb )
        if dflt is not None: return dflt
        return 'mosaic'
    def __mosweight( self, glb ):
        if 'mosweight' in glb: return glb['mosweight']
        dflt = self.__mosweight_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __scaletype( self, glb ):
        if 'scaletype' in glb: return glb['scaletype']
        dflt = self.__scaletype_dflt( glb )
        if dflt is not None: return dflt
        return 'SAULT'
    def __negcomponent( self, glb ):
        if 'negcomponent' in glb: return glb['negcomponent']
        dflt = self.__negcomponent_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __smallscalebias( self, glb ):
        if 'smallscalebias' in glb: return glb['smallscalebias']
        dflt = self.__smallscalebias_dflt( glb )
        if dflt is not None: return dflt
        return float(0.6)
    def __nchan( self, glb ):
        if 'nchan' in glb: return glb['nchan']
        dflt = self.__nchan_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __start( self, glb ):
        if 'start' in glb: return glb['start']
        dflt = self.__start_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __width( self, glb ):
        if 'width' in glb: return glb['width']
        dflt = self.__width_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __outframe( self, glb ):
        if 'outframe' in glb: return glb['outframe']
        dflt = self.__outframe_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __veltype( self, glb ):
        if 'veltype' in glb: return glb['veltype']
        dflt = self.__veltype_dflt( glb )
        if dflt is not None: return dflt
        return 'radio'
    def __robust( self, glb ):
        if 'robust' in glb: return glb['robust']
        dflt = self.__robust_dflt( glb )
        if dflt is not None: return dflt
        return float(0.0)
    def __outertaper( self, glb ):
        if 'outertaper' in glb: return glb['outertaper']
        dflt = self.__outertaper_dflt( glb )
        if dflt is not None: return dflt
        return [ '' ]
    def __innertaper( self, glb ):
        if 'innertaper' in glb: return glb['innertaper']
        dflt = self.__innertaper_dflt( glb )
        if dflt is not None: return dflt
        return [ '1.0' ]
    def __noise( self, glb ):
        if 'noise' in glb: return glb['noise']
        dflt = self.__noise_dflt( glb )
        if dflt is not None: return dflt
        return '1.0Jy'
    def __npixels( self, glb ):
        if 'npixels' in glb: return glb['npixels']
        dflt = self.__npixels_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __npercycle( self, glb ):
        if 'npercycle' in glb: return glb['npercycle']
        dflt = self.__npercycle_dflt( glb )
        if dflt is not None: return dflt
        return int(100)
    def __cyclefactor( self, glb ):
        if 'cyclefactor' in glb: return glb['cyclefactor']
        dflt = self.__cyclefactor_dflt( glb )
        if dflt is not None: return dflt
        return float(1.5)
    def __cyclespeedup( self, glb ):
        if 'cyclespeedup' in glb: return glb['cyclespeedup']
        dflt = self.__cyclespeedup_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __nterms( self, glb ):
        if 'nterms' in glb: return glb['nterms']
        dflt = self.__nterms_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __reffreq( self, glb ):
        if 'reffreq' in glb: return glb['reffreq']
        dflt = self.__reffreq_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __chaniter( self, glb ):
        if 'chaniter' in glb: return glb['chaniter']
        dflt = self.__chaniter_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __flatnoise( self, glb ):
        if 'flatnoise' in glb: return glb['flatnoise']
        dflt = self.__flatnoise_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __imageprefix_inp(self):
        description = ''
        value = self.__imageprefix( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imageprefix': value},{'imageprefix': self.__schema['imageprefix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('imageprefix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __imagesuffix_inp(self):
        description = ''
        value = self.__imagesuffix( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagesuffix': value},{'imagesuffix': self.__schema['imagesuffix']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('imagesuffix',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __ncpu_inp(self):
        description = ''
        value = self.__ncpu( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'ncpu': value},{'ncpu': self.__schema['ncpu']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('ncpu',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __twidth_inp(self):
        description = ''
        value = self.__twidth( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'twidth': value},{'twidth': self.__schema['twidth']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('twidth',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __doreg_inp(self):
        description = ''
        value = self.__doreg( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'doreg': value},{'doreg': self.__schema['doreg']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('doreg',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __usephacenter_inp(self):
        if self.__usephacenter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__usephacenter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'usephacenter': value},{'usephacenter': self.__schema['usephacenter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('usephacenter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __reftime_inp(self):
        if self.__reftime_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__reftime( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'reftime': value},{'reftime': self.__schema['reftime']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('reftime',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __toTb_inp(self):
        if self.__toTb_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__toTb( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'toTb': value},{'toTb': self.__schema['toTb']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('toTb',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __overwrite_inp(self):
        description = ''
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('overwrite',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __outlierfile_inp(self):
        description = ''
        value = self.__outlierfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'outlierfile': value},{'outlierfile': self.__schema['outlierfile']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('outlierfile',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        description = ''
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        description = ''
        value = self.__spw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __selectdata_inp(self):
        description = ''
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('selectdata',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __timerange_inp(self):
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('timerange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __uvrange_inp(self):
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('uvrange',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __antenna_inp(self):
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('antenna',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scan_inp(self):
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__scan( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __observation_inp(self):
        if self.__observation_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__observation( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __intent_inp(self):
        if self.__intent_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__intent( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('intent',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __mode_inp(self):
        description = ''
        value = self.__mode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'mode': value},{'mode': self.__schema['mode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('mode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __resmooth_inp(self):
        if self.__resmooth_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__resmooth( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'resmooth': value},{'resmooth': self.__schema['resmooth']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('resmooth',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __gridmode_inp(self):
        description = ''
        value = self.__gridmode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'gridmode': value},{'gridmode': self.__schema['gridmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('gridmode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __wprojplanes_inp(self):
        if self.__wprojplanes_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__wprojplanes( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'wprojplanes': value},{'wprojplanes': self.__schema['wprojplanes']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('wprojplanes',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __facets_inp(self):
        if self.__facets_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__facets( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'facets': value},{'facets': self.__schema['facets']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('facets',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __cfcache_inp(self):
        if self.__cfcache_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__cfcache( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'cfcache': value},{'cfcache': self.__schema['cfcache']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('cfcache',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __rotpainc_inp(self):
        if self.__rotpainc_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__rotpainc( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'rotpainc': value},{'rotpainc': self.__schema['rotpainc']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('rotpainc',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __painc_inp(self):
        if self.__painc_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__painc( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'painc': value},{'painc': self.__schema['painc']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('painc',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __aterm_inp(self):
        if self.__aterm_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__aterm( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'aterm': value},{'aterm': self.__schema['aterm']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('aterm',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __psterm_inp(self):
        if self.__psterm_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__psterm( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'psterm': value},{'psterm': self.__schema['psterm']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('psterm',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __mterm_inp(self):
        if self.__mterm_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__mterm( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'mterm': value},{'mterm': self.__schema['mterm']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('mterm',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __wbawp_inp(self):
        if self.__wbawp_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__wbawp( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'wbawp': value},{'wbawp': self.__schema['wbawp']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('wbawp',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __conjbeams_inp(self):
        if self.__conjbeams_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__conjbeams( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'conjbeams': value},{'conjbeams': self.__schema['conjbeams']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('conjbeams',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __epjtable_inp(self):
        if self.__epjtable_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__epjtable( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'epjtable': value},{'epjtable': self.__schema['epjtable']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('epjtable',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __interpolation_inp(self):
        if self.__interpolation_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__interpolation( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'interpolation': value},{'interpolation': self.__schema['interpolation']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('interpolation',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __niter_inp(self):
        description = ''
        value = self.__niter( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('niter',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __gain_inp(self):
        description = ''
        value = self.__gain( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'gain': value},{'gain': self.__schema['gain']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('gain',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __threshold_inp(self):
        description = ''
        value = self.__threshold( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'threshold': value},{'threshold': self.__schema['threshold']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('threshold',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __psfmode_inp(self):
        description = ''
        value = self.__psfmode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'psfmode': value},{'psfmode': self.__schema['psfmode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('psfmode',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __imagermode_inp(self):
        description = ''
        value = self.__imagermode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagermode': value},{'imagermode': self.__schema['imagermode']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('imagermode',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __ftmachine_inp(self):
        if self.__ftmachine_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__ftmachine( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'ftmachine': value},{'ftmachine': self.__schema['ftmachine']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('ftmachine',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __mosweight_inp(self):
        if self.__mosweight_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__mosweight( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'mosweight': value},{'mosweight': self.__schema['mosweight']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('mosweight',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __scaletype_inp(self):
        if self.__scaletype_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__scaletype( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'scaletype': value},{'scaletype': self.__schema['scaletype']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('scaletype',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __multiscale_inp(self):
        description = ''
        value = self.__multiscale( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'multiscale': value},{'multiscale': self.__schema['multiscale']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('multiscale',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __negcomponent_inp(self):
        if self.__negcomponent_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__negcomponent( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'negcomponent': value},{'negcomponent': self.__schema['negcomponent']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('negcomponent',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __smallscalebias_inp(self):
        if self.__smallscalebias_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__smallscalebias( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'smallscalebias': value},{'smallscalebias': self.__schema['smallscalebias']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('smallscalebias',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __interactive_inp(self):
        description = ''
        value = self.__interactive( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'interactive': value},{'interactive': self.__schema['interactive']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('interactive',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __mask_inp(self):
        description = ''
        value = self.__mask( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('mask',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __nchan_inp(self):
        if self.__nchan_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__nchan( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'nchan': value},{'nchan': self.__schema['nchan']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('nchan',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __start_inp(self):
        if self.__start_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__start( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'start': value},{'start': self.__schema['start']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('start',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __width_inp(self):
        if self.__width_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__width( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'width': value},{'width': self.__schema['width']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('width',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __outframe_inp(self):
        if self.__outframe_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__outframe( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'outframe': value},{'outframe': self.__schema['outframe']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('outframe',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __veltype_inp(self):
        if self.__veltype_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__veltype( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'veltype': value},{'veltype': self.__schema['veltype']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('veltype',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __imsize_inp(self):
        description = ''
        value = self.__imsize( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imsize': value},{'imsize': self.__schema['imsize']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('imsize',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __cell_inp(self):
        description = ''
        value = self.__cell( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'cell': value},{'cell': self.__schema['cell']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('cell',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __phasecenter_inp(self):
        description = ''
        value = self.__phasecenter( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'phasecenter': value},{'phasecenter': self.__schema['phasecenter']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('phasecenter',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __restfreq_inp(self):
        description = ''
        value = self.__restfreq( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'restfreq': value},{'restfreq': self.__schema['restfreq']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('restfreq',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __stokes_inp(self):
        description = ''
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('stokes',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __weighting_inp(self):
        description = ''
        value = self.__weighting( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'weighting': value},{'weighting': self.__schema['weighting']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('weighting',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __robust_inp(self):
        if self.__robust_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__robust( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'robust': value},{'robust': self.__schema['robust']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('robust',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __uvtaper_inp(self):
        description = ''
        value = self.__uvtaper( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'uvtaper': value},{'uvtaper': self.__schema['uvtaper']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23s%s' % ('uvtaper',pre,self.__to_string_(value),post),description,13+len(pre)+len(post))
    def __outertaper_inp(self):
        if self.__outertaper_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__outertaper( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'outertaper': value},{'outertaper': self.__schema['outertaper']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('outertaper',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __innertaper_inp(self):
        if self.__innertaper_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__innertaper( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'innertaper': value},{'innertaper': self.__schema['innertaper']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('innertaper',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __modelimage_inp(self):
        description = ''
        value = self.__modelimage( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'modelimage': value},{'modelimage': self.__schema['modelimage']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('modelimage',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __restoringbeam_inp(self):
        description = ''
        value = self.__restoringbeam( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'restoringbeam': value},{'restoringbeam': self.__schema['restoringbeam']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('restoringbeam',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __pbcor_inp(self):
        description = ''
        value = self.__pbcor( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'pbcor': value},{'pbcor': self.__schema['pbcor']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('pbcor',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __minpb_inp(self):
        description = ''
        value = self.__minpb( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'minpb': value},{'minpb': self.__schema['minpb']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('minpb',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __usescratch_inp(self):
        description = ''
        value = self.__usescratch( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'usescratch': value},{'usescratch': self.__schema['usescratch']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('usescratch',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __noise_inp(self):
        if self.__noise_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__noise( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'noise': value},{'noise': self.__schema['noise']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('noise',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __npixels_inp(self):
        if self.__npixels_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__npixels( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'npixels': value},{'npixels': self.__schema['npixels']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('npixels',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __npercycle_inp(self):
        if self.__npercycle_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__npercycle( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'npercycle': value},{'npercycle': self.__schema['npercycle']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('npercycle',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __cyclefactor_inp(self):
        if self.__cyclefactor_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__cyclefactor( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'cyclefactor': value},{'cyclefactor': self.__schema['cyclefactor']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('cyclefactor',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __cyclespeedup_inp(self):
        if self.__cyclespeedup_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__cyclespeedup( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'cyclespeedup': value},{'cyclespeedup': self.__schema['cyclespeedup']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('cyclespeedup',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __nterms_inp(self):
        if self.__nterms_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__nterms( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'nterms': value},{'nterms': self.__schema['nterms']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('nterms',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __reffreq_inp(self):
        if self.__reffreq_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__reffreq( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'reffreq': value},{'reffreq': self.__schema['reffreq']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('reffreq',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __chaniter_inp(self):
        if self.__chaniter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__chaniter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'chaniter': value},{'chaniter': self.__schema['chaniter']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('chaniter',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __flatnoise_inp(self):
        if self.__flatnoise_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__flatnoise( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'flatnoise': value},{'flatnoise': self.__schema['flatnoise']}) else ('\x1B[91m','\x1B[0m')
             self.__do_inp_output('   \x1B[92m%-14.14s =\x1B[0m %s%-23s%s' % ('flatnoise',pre,self.__to_string_(value),post),description,9+len(pre)+len(post))
    def __allowchunk_inp(self):
        description = ''
        value = self.__allowchunk( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'allowchunk': value},{'allowchunk': self.__schema['allowchunk']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-17.17s = %s%-23s%s' % ('allowchunk',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'painc' in glb: del glb['painc']
        if 'stokes' in glb: del glb['stokes']
        if 'rotpainc' in glb: del glb['rotpainc']
        if 'doreg' in glb: del glb['doreg']
        if 'multiscale' in glb: del glb['multiscale']
        if 'mask' in glb: del glb['mask']
        if 'field' in glb: del glb['field']
        if 'smallscalebias' in glb: del glb['smallscalebias']
        if 'weighting' in glb: del glb['weighting']
        if 'intent' in glb: del glb['intent']
        if 'noise' in glb: del glb['noise']
        if 'innertaper' in glb: del glb['innertaper']
        if 'interpolation' in glb: del glb['interpolation']
        if 'cyclespeedup' in glb: del glb['cyclespeedup']
        if 'nterms' in glb: del glb['nterms']
        if 'nchan' in glb: del glb['nchan']
        if 'gridmode' in glb: del glb['gridmode']
        if 'reffreq' in glb: del glb['reffreq']
        if 'conjbeams' in glb: del glb['conjbeams']
        if 'restoringbeam' in glb: del glb['restoringbeam']
        if 'reftime' in glb: del glb['reftime']
        if 'imsize' in glb: del glb['imsize']
        if 'chaniter' in glb: del glb['chaniter']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'outlierfile' in glb: del glb['outlierfile']
        if 'imagermode' in glb: del glb['imagermode']
        if 'flatnoise' in glb: del glb['flatnoise']
        if 'wbawp' in glb: del glb['wbawp']
        if 'interactive' in glb: del glb['interactive']
        if 'npixels' in glb: del glb['npixels']
        if 'mosweight' in glb: del glb['mosweight']
        if 'pbcor' in glb: del glb['pbcor']
        if 'uvtaper' in glb: del glb['uvtaper']
        if 'cyclefactor' in glb: del glb['cyclefactor']
        if 'toTb' in glb: del glb['toTb']
        if 'restfreq' in glb: del glb['restfreq']
        if 'imageprefix' in glb: del glb['imageprefix']
        if 'scaletype' in glb: del glb['scaletype']
        if 'outertaper' in glb: del glb['outertaper']
        if 'gain' in glb: del glb['gain']
        if 'twidth' in glb: del glb['twidth']
        if 'robust' in glb: del glb['robust']
        if 'resmooth' in glb: del glb['resmooth']
        if 'aterm' in glb: del glb['aterm']
        if 'usescratch' in glb: del glb['usescratch']
        if 'imagesuffix' in glb: del glb['imagesuffix']
        if 'usephacenter' in glb: del glb['usephacenter']
        if 'threshold' in glb: del glb['threshold']
        if 'psfmode' in glb: del glb['psfmode']
        if 'mterm' in glb: del glb['mterm']
        if 'ncpu' in glb: del glb['ncpu']
        if 'veltype' in glb: del glb['veltype']
        if 'npercycle' in glb: del glb['npercycle']
        if 'niter' in glb: del glb['niter']
        if 'outframe' in glb: del glb['outframe']
        if 'mode' in glb: del glb['mode']
        if 'cell' in glb: del glb['cell']
        if 'minpb' in glb: del glb['minpb']
        if 'uvrange' in glb: del glb['uvrange']
        if 'negcomponent' in glb: del glb['negcomponent']
        if 'psterm' in glb: del glb['psterm']
        if 'phasecenter' in glb: del glb['phasecenter']
        if 'allowchunk' in glb: del glb['allowchunk']
        if 'overwrite' in glb: del glb['overwrite']
        if 'start' in glb: del glb['start']
        if 'observation' in glb: del glb['observation']
        if 'facets' in glb: del glb['facets']
        if 'width' in glb: del glb['width']
        if 'modelimage' in glb: del glb['modelimage']
        if 'spw' in glb: del glb['spw']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']
        if 'epjtable' in glb: del glb['epjtable']
        if 'cfcache' in glb: del glb['cfcache']
        if 'wprojplanes' in glb: del glb['wprojplanes']
        if 'ftmachine' in glb: del glb['ftmachine']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# ptclean -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__imageprefix_inp( )
        self.__imagesuffix_inp( )
        self.__ncpu_inp( )
        self.__twidth_inp( )
        self.__doreg_inp( )
        self.__usephacenter_inp( )
        self.__reftime_inp( )
        self.__toTb_inp( )
        self.__overwrite_inp( )
        self.__outlierfile_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__selectdata_inp( )
        self.__timerange_inp( )
        self.__uvrange_inp( )
        self.__antenna_inp( )
        self.__scan_inp( )
        self.__observation_inp( )
        self.__intent_inp( )
        self.__mode_inp( )
        self.__resmooth_inp( )
        self.__gridmode_inp( )
        self.__wprojplanes_inp( )
        self.__facets_inp( )
        self.__cfcache_inp( )
        self.__rotpainc_inp( )
        self.__painc_inp( )
        self.__aterm_inp( )
        self.__psterm_inp( )
        self.__mterm_inp( )
        self.__wbawp_inp( )
        self.__conjbeams_inp( )
        self.__epjtable_inp( )
        self.__interpolation_inp( )
        self.__niter_inp( )
        self.__gain_inp( )
        self.__threshold_inp( )
        self.__psfmode_inp( )
        self.__imagermode_inp( )
        self.__ftmachine_inp( )
        self.__mosweight_inp( )
        self.__scaletype_inp( )
        self.__multiscale_inp( )
        self.__negcomponent_inp( )
        self.__smallscalebias_inp( )
        self.__interactive_inp( )
        self.__mask_inp( )
        self.__nchan_inp( )
        self.__start_inp( )
        self.__width_inp( )
        self.__outframe_inp( )
        self.__veltype_inp( )
        self.__imsize_inp( )
        self.__cell_inp( )
        self.__phasecenter_inp( )
        self.__restfreq_inp( )
        self.__stokes_inp( )
        self.__weighting_inp( )
        self.__robust_inp( )
        self.__uvtaper_inp( )
        self.__outertaper_inp( )
        self.__innertaper_inp( )
        self.__modelimage_inp( )
        self.__restoringbeam_inp( )
        self.__pbcor_inp( )
        self.__minpb_inp( )
        self.__usescratch_inp( )
        self.__noise_inp( )
        self.__npixels_inp( )
        self.__npercycle_inp( )
        self.__cyclefactor_inp( )
        self.__cyclespeedup_inp( )
        self.__nterms_inp( )
        self.__reffreq_inp( )
        self.__chaniter_inp( )
        self.__flatnoise_inp( )
        self.__allowchunk_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,file=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("ptclean.last"):
                filename = "ptclean.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file, setting defaults instead...")
            self.set_global_defaults( )

    def __call__( self, vis=None, imageprefix=None, imagesuffix=None, ncpu=None, twidth=None, doreg=None, usephacenter=None, reftime=None, toTb=None, overwrite=None, outlierfile=None, field=None, spw=None, selectdata=None, timerange=None, uvrange=None, antenna=None, scan=None, observation=None, intent=None, mode=None, resmooth=None, gridmode=None, wprojplanes=None, facets=None, cfcache=None, rotpainc=None, painc=None, aterm=None, psterm=None, mterm=None, wbawp=None, conjbeams=None, epjtable=None, interpolation=None, niter=None, gain=None, threshold=None, psfmode=None, imagermode=None, ftmachine=None, mosweight=None, scaletype=None, multiscale=None, negcomponent=None, smallscalebias=None, interactive=None, mask=None, nchan=None, start=None, width=None, outframe=None, veltype=None, imsize=None, cell=None, phasecenter=None, restfreq=None, stokes=None, weighting=None, robust=None, uvtaper=None, outertaper=None, innertaper=None, modelimage=None, restoringbeam=None, pbcor=None, minpb=None, usescratch=None, noise=None, npixels=None, npercycle=None, cyclefactor=None, cyclespeedup=None, nterms=None, reffreq=None, chaniter=None, flatnoise=None, allowchunk=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('ptclean.pre')
        _postfile = os.path.realpath('ptclean.last')
        _return_result_ = None
        _arguments = [vis,imageprefix,imagesuffix,ncpu,twidth,doreg,usephacenter,reftime,toTb,overwrite,outlierfile,field,spw,selectdata,timerange,uvrange,antenna,scan,observation,intent,mode,resmooth,gridmode,wprojplanes,facets,cfcache,rotpainc,painc,aterm,psterm,mterm,wbawp,conjbeams,epjtable,interpolation,niter,gain,threshold,psfmode,imagermode,ftmachine,mosweight,scaletype,multiscale,negcomponent,smallscalebias,interactive,mask,nchan,start,width,outframe,veltype,imsize,cell,phasecenter,restfreq,stokes,weighting,robust,uvtaper,outertaper,innertaper,modelimage,restoringbeam,pbcor,minpb,usescratch,noise,npixels,npercycle,cyclefactor,cyclespeedup,nterms,reffreq,chaniter,flatnoise,allowchunk]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if imageprefix is not None: local_global['imageprefix'] = imageprefix
            if imagesuffix is not None: local_global['imagesuffix'] = imagesuffix
            if ncpu is not None: local_global['ncpu'] = ncpu
            if twidth is not None: local_global['twidth'] = twidth
            if doreg is not None: local_global['doreg'] = doreg
            if overwrite is not None: local_global['overwrite'] = overwrite
            if outlierfile is not None: local_global['outlierfile'] = outlierfile
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if selectdata is not None: local_global['selectdata'] = selectdata
            if mode is not None: local_global['mode'] = mode
            if gridmode is not None: local_global['gridmode'] = gridmode
            if niter is not None: local_global['niter'] = niter
            if gain is not None: local_global['gain'] = gain
            if threshold is not None: local_global['threshold'] = threshold
            if psfmode is not None: local_global['psfmode'] = psfmode
            if imagermode is not None: local_global['imagermode'] = imagermode
            if multiscale is not None: local_global['multiscale'] = multiscale
            if interactive is not None: local_global['interactive'] = interactive
            if mask is not None: local_global['mask'] = mask
            if imsize is not None: local_global['imsize'] = imsize
            if cell is not None: local_global['cell'] = cell
            if phasecenter is not None: local_global['phasecenter'] = phasecenter
            if restfreq is not None: local_global['restfreq'] = restfreq
            if stokes is not None: local_global['stokes'] = stokes
            if weighting is not None: local_global['weighting'] = weighting
            if uvtaper is not None: local_global['uvtaper'] = uvtaper
            if modelimage is not None: local_global['modelimage'] = modelimage
            if restoringbeam is not None: local_global['restoringbeam'] = restoringbeam
            if pbcor is not None: local_global['pbcor'] = pbcor
            if minpb is not None: local_global['minpb'] = minpb
            if usescratch is not None: local_global['usescratch'] = usescratch
            if allowchunk is not None: local_global['allowchunk'] = allowchunk

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['imageprefix'] = self.__imageprefix( local_global )
            _invocation_parameters['imagesuffix'] = self.__imagesuffix( local_global )
            _invocation_parameters['ncpu'] = self.__ncpu( local_global )
            _invocation_parameters['twidth'] = self.__twidth( local_global )
            _invocation_parameters['doreg'] = self.__doreg( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['outlierfile'] = self.__outlierfile( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['mode'] = self.__mode( local_global )
            _invocation_parameters['gridmode'] = self.__gridmode( local_global )
            _invocation_parameters['niter'] = self.__niter( local_global )
            _invocation_parameters['gain'] = self.__gain( local_global )
            _invocation_parameters['threshold'] = self.__threshold( local_global )
            _invocation_parameters['psfmode'] = self.__psfmode( local_global )
            _invocation_parameters['imagermode'] = self.__imagermode( local_global )
            _invocation_parameters['multiscale'] = self.__multiscale( local_global )
            _invocation_parameters['interactive'] = self.__interactive( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['imsize'] = self.__imsize( local_global )
            _invocation_parameters['cell'] = self.__cell( local_global )
            _invocation_parameters['phasecenter'] = self.__phasecenter( local_global )
            _invocation_parameters['restfreq'] = self.__restfreq( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['weighting'] = self.__weighting( local_global )
            _invocation_parameters['uvtaper'] = self.__uvtaper( local_global )
            _invocation_parameters['modelimage'] = self.__modelimage( local_global )
            _invocation_parameters['restoringbeam'] = self.__restoringbeam( local_global )
            _invocation_parameters['pbcor'] = self.__pbcor( local_global )
            _invocation_parameters['minpb'] = self.__minpb( local_global )
            _invocation_parameters['usescratch'] = self.__usescratch( local_global )
            _invocation_parameters['allowchunk'] = self.__allowchunk( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['usephacenter'] = self.__usephacenter( _invocation_parameters ) if usephacenter is None else usephacenter
            _invocation_parameters['reftime'] = self.__reftime( _invocation_parameters ) if reftime is None else reftime
            _invocation_parameters['toTb'] = self.__toTb( _invocation_parameters ) if toTb is None else toTb
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['observation'] = self.__observation( _invocation_parameters ) if observation is None else observation
            _invocation_parameters['intent'] = self.__intent( _invocation_parameters ) if intent is None else intent
            _invocation_parameters['resmooth'] = self.__resmooth( _invocation_parameters ) if resmooth is None else resmooth
            _invocation_parameters['wprojplanes'] = self.__wprojplanes( _invocation_parameters ) if wprojplanes is None else wprojplanes
            _invocation_parameters['facets'] = self.__facets( _invocation_parameters ) if facets is None else facets
            _invocation_parameters['cfcache'] = self.__cfcache( _invocation_parameters ) if cfcache is None else cfcache
            _invocation_parameters['rotpainc'] = self.__rotpainc( _invocation_parameters ) if rotpainc is None else rotpainc
            _invocation_parameters['painc'] = self.__painc( _invocation_parameters ) if painc is None else painc
            _invocation_parameters['aterm'] = self.__aterm( _invocation_parameters ) if aterm is None else aterm
            _invocation_parameters['psterm'] = self.__psterm( _invocation_parameters ) if psterm is None else psterm
            _invocation_parameters['mterm'] = self.__mterm( _invocation_parameters ) if mterm is None else mterm
            _invocation_parameters['wbawp'] = self.__wbawp( _invocation_parameters ) if wbawp is None else wbawp
            _invocation_parameters['conjbeams'] = self.__conjbeams( _invocation_parameters ) if conjbeams is None else conjbeams
            _invocation_parameters['epjtable'] = self.__epjtable( _invocation_parameters ) if epjtable is None else epjtable
            _invocation_parameters['interpolation'] = self.__interpolation( _invocation_parameters ) if interpolation is None else interpolation
            _invocation_parameters['ftmachine'] = self.__ftmachine( _invocation_parameters ) if ftmachine is None else ftmachine
            _invocation_parameters['mosweight'] = self.__mosweight( _invocation_parameters ) if mosweight is None else mosweight
            _invocation_parameters['scaletype'] = self.__scaletype( _invocation_parameters ) if scaletype is None else scaletype
            _invocation_parameters['negcomponent'] = self.__negcomponent( _invocation_parameters ) if negcomponent is None else negcomponent
            _invocation_parameters['smallscalebias'] = self.__smallscalebias( _invocation_parameters ) if smallscalebias is None else smallscalebias
            _invocation_parameters['nchan'] = self.__nchan( _invocation_parameters ) if nchan is None else nchan
            _invocation_parameters['start'] = self.__start( _invocation_parameters ) if start is None else start
            _invocation_parameters['width'] = self.__width( _invocation_parameters ) if width is None else width
            _invocation_parameters['outframe'] = self.__outframe( _invocation_parameters ) if outframe is None else outframe
            _invocation_parameters['veltype'] = self.__veltype( _invocation_parameters ) if veltype is None else veltype
            _invocation_parameters['robust'] = self.__robust( _invocation_parameters ) if robust is None else robust
            _invocation_parameters['outertaper'] = self.__outertaper( _invocation_parameters ) if outertaper is None else outertaper
            _invocation_parameters['innertaper'] = self.__innertaper( _invocation_parameters ) if innertaper is None else innertaper
            _invocation_parameters['noise'] = self.__noise( _invocation_parameters ) if noise is None else noise
            _invocation_parameters['npixels'] = self.__npixels( _invocation_parameters ) if npixels is None else npixels
            _invocation_parameters['npercycle'] = self.__npercycle( _invocation_parameters ) if npercycle is None else npercycle
            _invocation_parameters['cyclefactor'] = self.__cyclefactor( _invocation_parameters ) if cyclefactor is None else cyclefactor
            _invocation_parameters['cyclespeedup'] = self.__cyclespeedup( _invocation_parameters ) if cyclespeedup is None else cyclespeedup
            _invocation_parameters['nterms'] = self.__nterms( _invocation_parameters ) if nterms is None else nterms
            _invocation_parameters['reffreq'] = self.__reffreq( _invocation_parameters ) if reffreq is None else reffreq
            _invocation_parameters['chaniter'] = self.__chaniter( _invocation_parameters ) if chaniter is None else chaniter
            _invocation_parameters['flatnoise'] = self.__flatnoise( _invocation_parameters ) if flatnoise is None else flatnoise

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['imageprefix'] = self.__imageprefix( self.__globals_( ) )
            _invocation_parameters['imagesuffix'] = self.__imagesuffix( self.__globals_( ) )
            _invocation_parameters['ncpu'] = self.__ncpu( self.__globals_( ) )
            _invocation_parameters['twidth'] = self.__twidth( self.__globals_( ) )
            _invocation_parameters['doreg'] = self.__doreg( self.__globals_( ) )
            _invocation_parameters['usephacenter'] = self.__usephacenter( self.__globals_( ) )
            _invocation_parameters['reftime'] = self.__reftime( self.__globals_( ) )
            _invocation_parameters['toTb'] = self.__toTb( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['outlierfile'] = self.__outlierfile( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
            _invocation_parameters['resmooth'] = self.__resmooth( self.__globals_( ) )
            _invocation_parameters['gridmode'] = self.__gridmode( self.__globals_( ) )
            _invocation_parameters['wprojplanes'] = self.__wprojplanes( self.__globals_( ) )
            _invocation_parameters['facets'] = self.__facets( self.__globals_( ) )
            _invocation_parameters['cfcache'] = self.__cfcache( self.__globals_( ) )
            _invocation_parameters['rotpainc'] = self.__rotpainc( self.__globals_( ) )
            _invocation_parameters['painc'] = self.__painc( self.__globals_( ) )
            _invocation_parameters['aterm'] = self.__aterm( self.__globals_( ) )
            _invocation_parameters['psterm'] = self.__psterm( self.__globals_( ) )
            _invocation_parameters['mterm'] = self.__mterm( self.__globals_( ) )
            _invocation_parameters['wbawp'] = self.__wbawp( self.__globals_( ) )
            _invocation_parameters['conjbeams'] = self.__conjbeams( self.__globals_( ) )
            _invocation_parameters['epjtable'] = self.__epjtable( self.__globals_( ) )
            _invocation_parameters['interpolation'] = self.__interpolation( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
            _invocation_parameters['gain'] = self.__gain( self.__globals_( ) )
            _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
            _invocation_parameters['psfmode'] = self.__psfmode( self.__globals_( ) )
            _invocation_parameters['imagermode'] = self.__imagermode( self.__globals_( ) )
            _invocation_parameters['ftmachine'] = self.__ftmachine( self.__globals_( ) )
            _invocation_parameters['mosweight'] = self.__mosweight( self.__globals_( ) )
            _invocation_parameters['scaletype'] = self.__scaletype( self.__globals_( ) )
            _invocation_parameters['multiscale'] = self.__multiscale( self.__globals_( ) )
            _invocation_parameters['negcomponent'] = self.__negcomponent( self.__globals_( ) )
            _invocation_parameters['smallscalebias'] = self.__smallscalebias( self.__globals_( ) )
            _invocation_parameters['interactive'] = self.__interactive( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['nchan'] = self.__nchan( self.__globals_( ) )
            _invocation_parameters['start'] = self.__start( self.__globals_( ) )
            _invocation_parameters['width'] = self.__width( self.__globals_( ) )
            _invocation_parameters['outframe'] = self.__outframe( self.__globals_( ) )
            _invocation_parameters['veltype'] = self.__veltype( self.__globals_( ) )
            _invocation_parameters['imsize'] = self.__imsize( self.__globals_( ) )
            _invocation_parameters['cell'] = self.__cell( self.__globals_( ) )
            _invocation_parameters['phasecenter'] = self.__phasecenter( self.__globals_( ) )
            _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['weighting'] = self.__weighting( self.__globals_( ) )
            _invocation_parameters['robust'] = self.__robust( self.__globals_( ) )
            _invocation_parameters['uvtaper'] = self.__uvtaper( self.__globals_( ) )
            _invocation_parameters['outertaper'] = self.__outertaper( self.__globals_( ) )
            _invocation_parameters['innertaper'] = self.__innertaper( self.__globals_( ) )
            _invocation_parameters['modelimage'] = self.__modelimage( self.__globals_( ) )
            _invocation_parameters['restoringbeam'] = self.__restoringbeam( self.__globals_( ) )
            _invocation_parameters['pbcor'] = self.__pbcor( self.__globals_( ) )
            _invocation_parameters['minpb'] = self.__minpb( self.__globals_( ) )
            _invocation_parameters['usescratch'] = self.__usescratch( self.__globals_( ) )
            _invocation_parameters['noise'] = self.__noise( self.__globals_( ) )
            _invocation_parameters['npixels'] = self.__npixels( self.__globals_( ) )
            _invocation_parameters['npercycle'] = self.__npercycle( self.__globals_( ) )
            _invocation_parameters['cyclefactor'] = self.__cyclefactor( self.__globals_( ) )
            _invocation_parameters['cyclespeedup'] = self.__cyclespeedup( self.__globals_( ) )
            _invocation_parameters['nterms'] = self.__nterms( self.__globals_( ) )
            _invocation_parameters['reffreq'] = self.__reffreq( self.__globals_( ) )
            _invocation_parameters['chaniter'] = self.__chaniter( self.__globals_( ) )
            _invocation_parameters['flatnoise'] = self.__flatnoise( self.__globals_( ) )
            _invocation_parameters['allowchunk'] = self.__allowchunk( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-14s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#ptclean( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _ptclean_t( _invocation_parameters['vis'],_invocation_parameters['imageprefix'],_invocation_parameters['imagesuffix'],_invocation_parameters['ncpu'],_invocation_parameters['twidth'],_invocation_parameters['doreg'],_invocation_parameters['usephacenter'],_invocation_parameters['reftime'],_invocation_parameters['toTb'],_invocation_parameters['overwrite'],_invocation_parameters['outlierfile'],_invocation_parameters['field'],_invocation_parameters['spw'],_invocation_parameters['selectdata'],_invocation_parameters['timerange'],_invocation_parameters['uvrange'],_invocation_parameters['antenna'],_invocation_parameters['scan'],_invocation_parameters['observation'],_invocation_parameters['intent'],_invocation_parameters['mode'],_invocation_parameters['resmooth'],_invocation_parameters['gridmode'],_invocation_parameters['wprojplanes'],_invocation_parameters['facets'],_invocation_parameters['cfcache'],_invocation_parameters['rotpainc'],_invocation_parameters['painc'],_invocation_parameters['aterm'],_invocation_parameters['psterm'],_invocation_parameters['mterm'],_invocation_parameters['wbawp'],_invocation_parameters['conjbeams'],_invocation_parameters['epjtable'],_invocation_parameters['interpolation'],_invocation_parameters['niter'],_invocation_parameters['gain'],_invocation_parameters['threshold'],_invocation_parameters['psfmode'],_invocation_parameters['imagermode'],_invocation_parameters['ftmachine'],_invocation_parameters['mosweight'],_invocation_parameters['scaletype'],_invocation_parameters['multiscale'],_invocation_parameters['negcomponent'],_invocation_parameters['smallscalebias'],_invocation_parameters['interactive'],_invocation_parameters['mask'],_invocation_parameters['nchan'],_invocation_parameters['start'],_invocation_parameters['width'],_invocation_parameters['outframe'],_invocation_parameters['veltype'],_invocation_parameters['imsize'],_invocation_parameters['cell'],_invocation_parameters['phasecenter'],_invocation_parameters['restfreq'],_invocation_parameters['stokes'],_invocation_parameters['weighting'],_invocation_parameters['robust'],_invocation_parameters['uvtaper'],_invocation_parameters['outertaper'],_invocation_parameters['innertaper'],_invocation_parameters['modelimage'],_invocation_parameters['restoringbeam'],_invocation_parameters['pbcor'],_invocation_parameters['minpb'],_invocation_parameters['usescratch'],_invocation_parameters['noise'],_invocation_parameters['npixels'],_invocation_parameters['npercycle'],_invocation_parameters['cyclefactor'],_invocation_parameters['cyclespeedup'],_invocation_parameters['nterms'],_invocation_parameters['reffreq'],_invocation_parameters['chaniter'],_invocation_parameters['flatnoise'],_invocation_parameters['allowchunk'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('ptclean')
            casalog.post("Exception Reported: Error in ptclean: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

ptclean = _ptclean( )

